<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Residual Networks for Light Field Image Super-Resolution</title>
      <link href="/2019/06/18/Residual-Networks-for-Light-Field-Image-Super-Resolution/"/>
      <url>/2019/06/18/Residual-Networks-for-Light-Field-Image-Super-Resolution/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> light field </tag>
            
            <tag> super resolution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EPINet: A Fully Convolutional Neural Network Using Epipolar Geometry for Depth from Light Field Images</title>
      <link href="/2019/06/16/EPINet-A-Fully-Convolutional-Neural-Network-Using-Epipolar-Geometry-for-Depth-from-Light-Field-Images/"/>
      <url>/2019/06/16/EPINet-A-Fully-Convolutional-Neural-Network-Using-Epipolar-Geometry-for-Depth-from-Light-Field-Images/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/06/16/EPINet-A-Fully-Convolutional-Neural-Network-Using-Epipolar-Geometry-for-Depth-from-Light-Field-Images/20190616-1.png" alt="20190616-1"></p><p>这是18年CVPR计算成像板块的一篇poster文章，因为网络结构和19年CVPR做光场SR的很像，所以在这里先读一下这篇，看看二者到底有什么区别。值得一提的是，这篇文章的团队是LFCNN的团队。</p><a id="more"></a><p>这篇文章的主要贡献有两个点：一个是网络结构，采用了一个multi-stream的网络结构，从不同的方向来获取EPI的信息，另一个就是它针对光场深度估计数据集太小做的一个数据增强，提出了一些light field specific的增强方法。</p><h2 id="Multi-stream网络结构"><a href="#Multi-stream网络结构" class="headerlink" title="Multi-stream网络结构"></a>Multi-stream网络结构</h2><p>网络结构图：</p><p><img src="/2019/06/16/EPINet-A-Fully-Convolutional-Neural-Network-Using-Epipolar-Geometry-for-Depth-from-Light-Field-Images/20190618-2.png" alt="20190616-2"></p><p>最理想的利用EPI的方法，当然是从EPI中辨别出各个方向的极线，然后计算其斜率得到视差和深度，例如15年PAMI的结构张量方法，但是这种方法是一种特征检测+优化的方法，不使用于深度学习，因此，简化一下，从四个整数正切值的方向获取SAI的stack，分成不同的stream送入网络，将得到的特征concat在一起，再用8个conv block预测最后的disparity map。</p><p><strong>（感觉看完这几篇文章得再总结一下别人是怎么利用高维数据信息的，例如高维的卷积、一些独特设计的卷积结构等，我总觉得这其中有可以挖掘的地方。）</strong></p><h2 id="针对光场深度估计的数据增强方法"><a href="#针对光场深度估计的数据增强方法" class="headerlink" title="针对光场深度估计的数据增强方法"></a>针对光场深度估计的数据增强方法</h2><p>文章提出了很多数据增强方法：变化central view、空间旋转、resize所有view、翻转所有view、色彩调整、直方图拉伸等等。针对空间旋转，不是简单地旋转空间维度就完事了，见下图：</p><p><img src="/2019/06/16/EPINet-A-Fully-Convolutional-Neural-Network-Using-Epipolar-Geometry-for-Depth-from-Light-Field-Images/20190618-3.png" alt="20190616-3"></p><p>在旋转90度之后，可以看到横方向的SAI之间的视差已经从原本的横方向变成了纵方向，所以应该要把它送进纵方向的网络里面去，而且label也要对应地旋转。</p><p>resize的话，也是要对视差的值进行数值上的resize的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>针对这篇文章，去年我看的时候并不觉得其网络结构有什么特别特殊的，但是今年CVPR有人拿它来做SR，效果还贼好，这就很尴尬了。。。一点想法：</p><ol><li>这种方法确实能够利用2D的卷积来比较不错地获取不同角度维的信息，但有一个缺陷，那就是它只能用到0、45、90、135这四个方向上的view，其他位置的view无法在multi-stream中被利用到，因此，如何充分地将所有的view之间的关系（这里所述的关系应当指的是角度上的邻接关系和不同角度的view之间的空间关系）。但是不得不承认这种方式可以比较简单地利用到光场的角度维信息，尽管并不完全；</li><li>文章为了针对小的baseline，用的是$2\times2$的卷积核，其实很少见，但是文章没有比较其他的核大小，所以无法说明是否真的有效。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lightfield </tag>
            
            <tag> depth estimation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建日志</title>
      <link href="/2019/06/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/"/>
      <url>/2019/06/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>鼓捣了两天多的时间，终于把博客初步搭建好了，功能基本上都OK了，如果还想要别的（比如google analytics），就以后再加啦。</p><a id="more"></a><h1 id="关于使用jekyll还是hexo"><a href="#关于使用jekyll还是hexo" class="headerlink" title="关于使用jekyll还是hexo"></a>关于使用jekyll还是hexo</h1><p><a href="https://jekyllrb.com" target="_blank" rel="noopener">jekyll</a>和<a href="https://hexo.io" target="_blank" rel="noopener">hexo</a>是两个比较常用的静态网页框架，但是二者的体验是完全不一样的。这两天半的时间我主要是花在了jekyll上，使用的主题说明文档虽然很详细，但是涉及到的网页前端的底部知识太多了，依赖环境ruby也老是出问题，搞了老半天，搞了个半成品，地址在<a href="Joechann0831.github.io">失败作品</a>，只有简单的功能，因为复杂的功能都没加成功T_T</p><p>hexo就不一样了，它的开发文档很详细，而且操作很简单高效，加上用户群体多，社区体验很好，很多问题都能找到解决方案，因此使用hexo还是很好的。</p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>jekyll的搭建步骤就不详述了，太麻烦，而且我也没完全成功，这里主要记录一下使用hexo搭建博客的过程吧。</p><p>具体步骤是参考了<a href="https://blog.csdn.net/Gage__/article/details/80302471" target="_blank" rel="noopener">基于Ubuntu搭建Hexo个人博客</a>，这里加上了一些自己遇到的问题。</p><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git-core -y</span><br></pre></td></tr></table></figure><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h3><p>因为我在之前捣鼓jekyll的时候已经把这俩装好了，所以前面参考的博客里面的那三句话能不能用我也不晓得，就不记录了。</p><h2 id="二、-安装Hexo并初始化模板"><a href="#二、-安装Hexo并初始化模板" class="headerlink" title="二、 安装Hexo并初始化模板"></a>二、 安装Hexo并初始化模板</h2><h3 id="1-安装npm"><a href="#1-安装npm" class="headerlink" title="1. 安装npm"></a>1. 安装npm</h3><p>Hexo的相关依赖和包使用npm来安装的，因此要先安装npm，使用淘宝的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><p>创建一个自己的网页文件夹，例如我的是ZhenChengUSTC.github.io文件夹，cd到改文件夹下，执行下述命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>注意使用上述两个npm命令时，最好加上sudo权限，否则会出现权限不足的问题</strong></p><h3 id="3-初始化Hexo文件夹"><a href="#3-初始化Hexo文件夹" class="headerlink" title="3. 初始化Hexo文件夹"></a>3. 初始化Hexo文件夹</h3><p>在该文件夹下初始化Hexo的模板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>此时如果hexo安装所需的依赖没有安装，它会自动安装，只需要耐心等待。</p><h3 id="4-预览Hexo网页"><a href="#4-预览Hexo网页" class="headerlink" title="4. 预览Hexo网页"></a>4. 预览Hexo网页</h3><p>init结束之后，文件夹底下就已经有一个名为landscape的模板了，比较丑，但是我们可以预览一下确认Hexo安装是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>hexo server默认端口是4000,如果端口被占用，可以更改端口或者解除占用，参考<a href="https://blog.csdn.net/yucicheung/article/details/79535282" target="_blank" rel="noopener">Ubuntu下用hexo搭建github博客</a>，这里不再赘述。</p><h2 id="三、更改主题"><a href="#三、更改主题" class="headerlink" title="三、更改主题"></a>三、更改主题</h2><p>初始的主体不太好看，我选择了yelee主题，这个主体比较符合我的审美而且有完整的<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">中文说明文档</a>，很方便，具体步骤：</p><h3 id="1-git-clone主题文件"><a href="#1-git-clone主题文件" class="headerlink" title="1. git clone主题文件"></a>1. git clone主题文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure><h3 id="2-更改主题文件"><a href="#2-更改主题文件" class="headerlink" title="2. 更改主题文件"></a>2. 更改主题文件</h3><p>更改hexo/_config.yml中的theme: landscape为theme: yelee，再用hexo server就可以预览新主题。</p><h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><p>首先自己的github上要已经申请好了repo，repo的名称为username.github.io</p><h3 id="1-安装部署插件"><a href="#1-安装部署插件" class="headerlink" title="1. 安装部署插件"></a>1. 安装部署插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-配置git"><a href="#2-配置git" class="headerlink" title="2. 配置git"></a>2. 配置git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/username/username.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="3-生成和部署"><a href="#3-生成和部署" class="headerlink" title="3. 生成和部署"></a>3. 生成和部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># or hexo generate，用于生成静态网页</span></span><br><span class="line">hexo d <span class="comment"># or hexo deploy，用于部署到github</span></span><br></pre></td></tr></table></figure><h3 id="4-修改和添加内容之后"><a href="#4-修改和添加内容之后" class="headerlink" title="4. 修改和添加内容之后"></a>4. 修改和添加内容之后</h3><p>修改和添加内容之后，需要更新网页，进行再部署，首先要清空public/下的文件，然后重新生成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>通过上述命令即可完成部署了，在username.github.io上就可以看到自己的网页啦，bravo！</p><h1 id="功能添加和改动"><a href="#功能添加和改动" class="headerlink" title="功能添加和改动"></a>功能添加和改动</h1><p>其他的简单功能在yelee的官方文档中已经有了详细的说明和指导，这里不再细述，主要讲一下自己添加的一些功能。</p><h2 id="一、评论"><a href="#一、评论" class="headerlink" title="一、评论"></a>一、评论</h2><p>评论功能是我放弃网易云笔记创建博客的初衷，希望能够促进技术交流。但是之前在使用jekyll的时候评论功能始终无法部署成功，因此选择了更简易的hexo，yelee默认支持的几个评论平台是Disqus、多说以及友言评论，Disqus需要翻墙，加载很慢，遂放弃，后两者好像已经停止服务了，因此默认支持的都不太行，所以我改成了使用<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a>，体验还可以。记录一下主要步骤和问题（参考链接为<a href="https://blog.wangriyu.wang/2018/03-valine.html" target="_blank" rel="noopener">yelee使用gitalk</a>）：</p><h3 id="1-注册github-OAuth-application"><a href="#1-注册github-OAuth-application" class="headerlink" title="1. 注册github OAuth application"></a>1. 注册github OAuth application</h3><p>因为gitalk是使用github的API实现评论的，评论内容实际上是保存在issue里面的，在链接<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth application申请</a>申请一个API，记下clientID和clientSecret，后面有用。</p><h3 id="2-修改主题配置文件"><a href="#2-修改主题配置文件" class="headerlink" title="2. 修改主题配置文件"></a>2. 修改主题配置文件</h3><p>在theme/yelee文件夹底下的_config.yml中添加下面的语句：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  clientID:</span> <span class="string">'your client ID'</span></span><br><span class="line"><span class="attr">  clientSecret:</span> <span class="string">'your clientSecret'</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">'username.github.io'</span> <span class="comment"># 仓库地址</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">'username'</span> <span class="comment"># 拥有者</span></span><br><span class="line"><span class="attr">  admin:</span> <span class="string">['username']</span> <span class="comment"># admin 用户</span></span><br></pre></td></tr></table></figure><h3 id="3-创建页面描述文件"><a href="#3-创建页面描述文件" class="headerlink" title="3. 创建页面描述文件"></a>3. 创建页面描述文件</h3><p>在theme/yelee/layout/_partial/comments下创建gitalk.ejs，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;section id=&apos;comments&apos; style=&apos;margin: 2em; padding: 2em; background: rgba(255, 255, 255, 0.5)&apos;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">      clientID: &apos;&lt;%= theme.gitalk.clientID %&gt;&apos;,</span><br><span class="line">      clientSecret: &apos;&lt;%= theme.gitalk.clientSecret %&gt;&apos;,</span><br><span class="line">      repo: &apos;&lt;%= theme.gitalk.repo %&gt;&apos;,</span><br><span class="line">      owner: &apos;&lt;%= theme.gitalk.owner %&gt;&apos;,</span><br><span class="line">      admin: [&apos;&lt;%= theme.gitalk.owner %&gt;&apos;],</span><br><span class="line">      id: window.location.pathname</span><br><span class="line">    &#125;)</span><br><span class="line">    gitalk.render(&apos;gitalk-container&apos;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><h3 id="4-修改-partial-article-ejs"><a href="#4-修改-partial-article-ejs" class="headerlink" title="4. 修改_partial/article.ejs"></a>4. 修改_partial/article.ejs</h3><p>打开theme/yelee/layout/_partial/article.ejs，将gitalk组件加入文章的comment组件中去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(&apos;comments/duoshuo&apos;, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/youyan&apos;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/disqus&apos;, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/disqus&apos;, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">+    &lt;% &#125; else if (theme.gitalk.on) &#123; %&gt;</span><br><span class="line">+        &lt;%- partial(&apos;comments/gitalk&apos;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="5-链接github-issue以及修改长度"><a href="#5-链接github-issue以及修改长度" class="headerlink" title="5. 链接github issue以及修改长度"></a>5. 链接github issue以及修改长度</h3><p>在这些文件修改完毕之后，就可以看到本地的网页上有gitalk显示了，但是本地部署的时候会提示没有关联到相关的github issue，这是因为本地部署的问题，这时候需要部署到github网页上，点击下方的登录github并关联，关联一下之后就可以了。</p><p>但是这样还会有一个小问题，那就是会在评论栏报一个错，导致无法评论，错误为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Validation Failed</span><br></pre></td></tr></table></figure><p>这是因为issue的标签label有长度限制，而我们前面在1-4步时加入的label太长了，因此，将步骤3中的id: window.location.pathname改为id: ‘&lt;%= page.date %&gt;’，部署到网站之后，即可完成评论功能的添加。</p><p><img src="/2019/06/15/博客搭建日志/20190615-comments.png" alt="20190615-comments"></p><h2 id="二、其他功能"><a href="#二、其他功能" class="headerlink" title="二、其他功能"></a>二、其他功能</h2><p>其他功能还未添加，例如google analytics以及其他花里胡哨的功能，暂时不需要这样的功能，因此等有闲余时间想折腾了再来搞吧。</p>]]></content>
      
      
      <categories>
          
          <category> Techs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tech </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
